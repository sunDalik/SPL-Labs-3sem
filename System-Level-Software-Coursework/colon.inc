;---colon macro---
%macro colon 3
section .data 
    wh_ %+ %2 : dq _lw
    %define _lw wh_ %+ %2 
    str_ %+ %2: db 0, %1, 0, %3
    xt_ %+ %2 : dq i_docol
%endmacro

%macro colon 2
    colon %1, %2, 0
%endmacro

;---other macros---

%macro branch 1 
    dq xt_branch
    dq %1
%endmacro

%macro branch0 1 
    dq xt_branch0
    dq %1 
%endmacro

%macro const 2
    colon %1, %2
    dq xt_lit,  %2, xt_exit
%endmacro

;------

section .rodata
msg:
    .no_such_word: db "! No such word: ", 0

section .bss
word_buf:  resq 512
user_dict:  resq 65536
section .data
here:  dq user_dict
fd: dq 0

%define STATE_COMPILE 1
%define STATE_INTERPRET 0
state: dq STATE_INTERPRET


const "forth-dp", dp
const "forth-here", here
const "forth-last-word", last_word
const "forth-is-compiling", state
const "forth-input-fd", fd
const "forth-stack-start", stack_start


colon "bye", bye
    dq xt_lit, 60
    TIMES 6 dq xt_lit, 0
    dq xt_syscall

%define sys_read_no 0
%define sys_write_no 1

colon "sys-read", sys_read
    TIMES 3 dq xt_to_rs
    dq xt_lit, sys_read_no
    TIMES 3 dq xt_from_rs
    TIMES 3 dq xt_lit, 0
    dq xt_syscall , xt_drop, xt_exit

colon "sys-write", sys_write
    TIMES 3 dq xt_to_rs
    dq xt_lit, sys_write_no
    TIMES 3 dq xt_from_rs
    TIMES 3 dq xt_lit, 0
    dq xt_syscall , xt_drop, xt_exit


colon  "stack-cell", stack_cell
    dq xt_lit, 0, xt_sp, xt_exit

; ( fd - char 1) or ( - 0 )
colon "file-read-char", file_read_char
    dq xt_to_rs, xt_stack_cell, xt_from_rs, xt_swap, xt_lit, 1, xt_sys_read
    branch0 .file_read_char_fail
    dq xt_lit, 1
    .file_read_char_fail :
	    dq xt_exit

  ; ( fd char - )
colon "file-write-char", file_write_char
    dq xt_swap, xt_to_rs, xt_to_rs
    dq xt_stack_cell, xt_dup, xt_from_rs, xt_swap, xt_write_char_mem
    dq xt_from_rs, xt_swap, xt_lit, 1, xt_sys_write, xt_drop, xt_drop, xt_exit

colon "string-length", string_length
    dq xt_dup
    .loop:
        dq xt_dup, xt_fetch_char_mem
        branch0 .exit
        dq xt_inc
        branch .loop
    .exit:
        dq xt_swap, xt_minus, xt_exit

colon "print-cr", print_cr
    dq xt_lit, 1, xt_lit, 10, xt_file_write_char, xt_exit

;  ( str count - )
colon "print-string-counted", print_string_counted
    dq xt_to_rs, xt_to_rs, xt_lit, 1, xt_from_rs, xt_from_rs, xt_sys_write, xt_drop, xt_exit

; ( str -- )
colon "print-string", print_string
    dq xt_dup, xt_string_length, xt_print_string_counted, xt_exit

colon "char-is-space", char_is_space
    dq xt_to_rs
    dq xt_rs_fetch, xt_lit,  ' ', xt_equals
    dq xt_rs_fetch, xt_lit, 10, xt_equals, xt_lor
    dq xt_rs_fetch, xt_lit, 13, xt_equals, xt_lor
    dq xt_from_rs,  xt_lit, '\t', xt_equals, xt_lor, xt_exit

  ; ( addr - )
colon "string-terminate", string_terminate
    dq xt_lit, 0, xt_swap, xt_write_char_mem, xt_exit

;  ( fd buffer -  )
colon "file-read-word", file_read_word
    dq xt_dup, xt_to_rs, xt_to_rs
    .read_space:
        dq xt_dup, xt_file_read_char
        branch0 .eof
        dq xt_dup, xt_char_is_space
        branch0 .commit
        dq xt_drop
        branch .read_space
    .read:
        dq xt_dup, xt_file_read_char
        branch0 .eof
        dq xt_dup, xt_char_is_space, xt_not
        branch0 .end
    .commit:
        dq xt_rs_fetch, xt_write_char_mem
        dq xt_from_rs, xt_inc, xt_to_rs
        branch .read
    .end:
        dq xt_drop
    .eof:
        dq xt_drop, xt_rs_fetch, xt_string_terminate
        dq xt_from_rs, xt_from_rs, xt_minus, xt_exit



colon ",", comma
    dq xt_here, xt_fetch_mem, xt_write_mem
    dq xt_here, xt_fetch_mem, xt_lit, 8, xt_plus
    dq xt_here, xt_write_mem, xt_exit

colon "c,", char_comma
    dq xt_here, xt_fetch_mem, xt_write_char_mem
    dq xt_here, xt_fetch_mem, xt_inc
    dq xt_here, xt_write_mem, xt_exit

colon "2dup", ddup
    dq xt_to_rs, xt_dup, xt_rs_fetch, xt_swap, xt_from_rs, xt_exit

colon "2inc", dinc
    dq xt_to_rs, xt_inc, xt_from_rs, xt_inc, xt_exit

colon "string-equals", string_equals
    .start:
        dq xt_ddup, xt_fetch_char_mem, xt_swap, xt_fetch_char_mem, xt_equals
        branch0 .no
        dq xt_dup, xt_fetch_char_mem
        branch0 .yes
        dq xt_dinc
        branch .start
    .yes:
        dq xt_drop, xt_drop, xt_lit, 1, xt_exit
    .no:
        dq xt_drop, xt_drop, xt_lit, 0, xt_exit

colon "forth-dict-word-name", forth_dict_word_name
    dq xt_lit, 9, xt_plus, xt_exit

colon "forth-find-word", forth_find_word
    dq xt_to_rs, xt_last_word, xt_fetch_mem
    dq xt_state, xt_fetch_mem
    branch0 .loop
    dq xt_fetch_mem
    .loop:
        dq xt_dup
        branch0 .not_found
        dq xt_dup, xt_forth_dict_word_name, xt_rs_fetch, xt_string_equals, xt_not
        branch0 .found
        dq xt_fetch_mem
        branch .loop
    .found:
        dq xt_lit, 1
    .not_found:
        dq xt_from_rs, xt_drop, xt_exit

colon "'", forth_tick, 1
    dq xt_fd, xt_fetch_mem, xt_lit, word_buf, xt_file_read_word
    branch0 .eof
    dq xt_lit, word_buf, xt_forth_find_word
    branch0 .no_word
    dq xt_forth_cfa, xt_state
    branch0 .interp
    dq xt_lit, xt_lit, xt_comma, xt_comma
    .interp:
        dq xt_exit
    .no_word:
        dq xt_lit, msg.no_such_word, xt_print_string, xt_print_string, xt_print_cr, xt_exit
    .eof:
        dq xt_drop, xt_exit

colon "forth-cfa", forth_cfa
    dq xt_lit, 9, xt_plus
    dq xt_dup, xt_string_length, xt_plus
    dq xt_lit, 2, xt_plus, xt_exit

; ( dest source - )
colon "string-copy", string_copy
    .loop:
        dq xt_ddup, xt_fetch_char_mem, xt_to_rs, xt_rs_fetch, xt_swap, xt_write_char_mem
        dq xt_dinc, xt_from_rs, xt_not
        branch0 .loop
    dq xt_drop, xt_drop, xt_exit

; ( flags name - )
colon "forth-create", forth_create
    dq xt_here, xt_fetch_mem               ; word start
    dq xt_last_word, xt_fetch_mem, xt_comma ; fill `link`
    dq xt_last_word, xt_write_mem           ; update `last_word`
    dq xt_lit, 0, xt_char_comma
    dq xt_dup, xt_here, xt_fetch_mem, xt_swap, xt_string_copy
    dq xt_string_length, xt_here, xt_fetch_mem, xt_plus, xt_inc, xt_here, xt_write_mem
    dq xt_char_comma
    dq xt_exit

colon ":", colon
    .restart:
        dq xt_fd, xt_fetch_mem, xt_lit, word_buf, xt_file_read_word
        branch0 .restart
        dq xt_lit, 0, xt_lit, word_buf, xt_forth_create
        dq xt_lit, STATE_COMPILE, xt_state, xt_write_mem
        dq xt_lit, i_docol, xt_comma, xt_exit

colon ";", semicolon, 1
    dq xt_lit, STATE_INTERPRET, xt_state, xt_write_mem
    dq xt_lit, xt_exit, xt_comma, xt_exit

colon "char-is-digit", char_is_digit
    dq xt_to_rs
    dq xt_rs_fetch, xt_lit, '9'+1, xt_less
    dq xt_lit, '0'-1, xt_rs_fetch, xt_less, xt_land
    dq xt_from_rs, xt_drop, xt_exit

colon "drop0", drop0
    dq xt_dup
    branch0 .is_zero
    dq xt_exit
    .is_zero:
        dq xt_drop, xt_exit

colon "char-to-digit", char_to_digit
    dq xt_lit, '0', xt_minus, xt_exit

; ( buf -- num? len )
colon "string-parse-unsigned-number", string_parse_unsigned_number
    dq xt_dup, xt_to_rs
    dq xt_lit, 0, xt_to_rs
    .loop:
        dq xt_dup, xt_fetch_char_mem, xt_dup, xt_char_is_digit
        branch0 .end
        dq xt_char_to_digit
        dq xt_lit, 10, xt_from_rs, xt_mul, xt_plus, xt_to_rs
        dq xt_inc
        branch .loop
    .end:
        dq xt_drop, xt_from_rs, xt_swap, xt_from_rs, xt_minus, xt_drop0, xt_exit

colon "neg", neg
    dq xt_lit, 0, xt_swap, xt_minus, xt_exit

colon "inc", inc
    dq xt_lit, 1, xt_plus, xt_exit

; ( buf -- num? len )
colon "string-parse-number", string_parse_number
    dq xt_dup, xt_fetch_char_mem, xt_dup, xt_char_is_digit, xt_not
    branch0 .unsigned
    dq xt_dup, xt_lit, '-', xt_equals, xt_not
    branch0 .negative
    dq xt_dup, xt_lit, '+', xt_equals, xt_not
    branch0 .positive
    .negative:
        dq xt_drop
        dq xt_inc, xt_string_parse_unsigned_number
        dq xt_dup
        branch0 .error
        dq xt_inc
        dq xt_swap, xt_neg, xt_swap, xt_exit
    .positive:
        dq xt_drop
        dq xt_inc, xt_string_parse_unsigned_number
        dq xt_dup
        branch0 .error
        dq xt_inc, xt_exit
    .unsigned:
        dq xt_drop, xt_string_parse_unsigned_number, xt_exit 
    .error:
        dq xt_drop, xt_lit, 0, xt_exit

colon "forth-follows-branch", forth_follows_branch
    dq xt_here, xt_fetch_mem, xt_lit, 8, xt_minus, xt_fetch_mem
    dq xt_dup, xt_lit, xt_branch0, xt_equals, xt_swap
    dq xt_lit, xt_branch, xt_equals, xt_lor, xt_exit

; (  fd -- )
colon "forth-interpret-fd", forth_interpret_fd
    dq xt_lit, xt_fd, xt_fetch_mem, xt_to_rs
    dq xt_fd, xt_write_mem
    .loop:
        dq xt_fd, xt_fetch_mem, xt_lit, word_buf, xt_file_read_word
        branch0 .eof
        dq xt_lit, word_buf, xt_forth_interpret
        branch .loop
    .eof:
        dq xt_from_rs, xt_fd, xt_write_mem, xt_exit

colon "forth-xt-is-immediate", forth_xt_is_immediate
    dq xt_lit, 1, xt_minus, xt_fetch_char_mem, xt_exit

; ( str - )
colon "forth-interpret", forth_interpret
    .start:
        ; ( inbuf )
        dq xt_dup, xt_forth_find_word         ; find in dict
        branch0 .number                       ; ( inbuf dictaddr? 0/1 )
        dq xt_swap, xt_drop, xt_forth_cfa     ; ( xt )
        ; if not compiling
        dq xt_state, xt_fetch_mem
        branch0 .interpreting
        dq xt_dup, xt_forth_xt_is_immediate, xt_not
        branch0 .interpreting
    .compiling:
        dq xt_comma, xt_exit
    .interpreting:
        dq xt_execute, xt_exit
    .number: ; ( inbuf )
        dq xt_dup, xt_string_parse_number      ; ( inbuf num? 0/len )
        branch0 .no_word
        ; ( inbuf num )
        dq xt_swap, xt_drop
        dq xt_state, xt_fetch_mem
        branch0 .exit
        dq xt_forth_follows_branch, xt_not
        branch0 .is_branch
    .not_branch:
        dq xt_lit, xt_lit, xt_comma
    .is_branch: ; ( num prev_xt )
        dq xt_comma, xt_exit
    .no_word: ; ( inbuf )
        dq xt_lit, msg.no_such_word, xt_print_string, xt_print_string, xt_print_cr
    .exit:
        dq xt_exit

native "forth-stack-restore", forth_stack_restore
    mov rsp, [stack_start]
    jmp next

colon "trap", trap
    dq xt_lit, wh_trap + 9, xt_print_string, xt_print_cr, xt_exit

forth_init:
    dq xt_lit, 0, xt_forth_interpret_fd, xt_bye